package dev.carloscy.repositories

import dev.carloscy.extensions.*
import dev.carloscy.models.*
import org.lighthousegames.logging.logging
import java.time.LocalDateTime

/**
 * Clase que representa un repositorio para gestionar el stock de un concesionario de veh√≠culos.
 * @property maxVehiculos tama√±o m√°ximo del array que almacena los veh√≠culos.
 * @property vehiculos array que almacena los veh√≠culos.
 * @property newId id autonum√©rico que se le asigna a cada veh√≠culo al almacenarlo en el array.
 */
class VehiculoRepositoryImpl: IVehiculoRepository {
    val logger = logging()
    private var maxVehiculos: Int = 10
    private var vehiculos: Array<Vehiculo?> = arrayOfNulls<Vehiculo>(maxVehiculos)
    private var newId: Int = 0

    /**
     * Genera un id autonum√©rico.
     * @return el id generado.
     */
    private fun generarId (): Int {
        newId++
        return newId
    }

    /**
     * Filtra los veh√≠culos de un array que cumplen una condici√≥n.
     * @param condition condici√≥n a cumplir.
     * @return un array que contiene solo los veh√≠culos que cumplen la condici√≥n.
     */
    override fun findBy(condition: (Vehiculo) -> Boolean): Array<Vehiculo> {
        return vehiculos.filterBy { condition(it) }
    }

    /**
     * Calcula la media de los veh√≠culos de un array que cumplen una condici√≥n.
     * @param condition condici√≥n a cumplir.
     * @return la media.
     */
    override fun averageBy(condition: (Vehiculo) -> Boolean): Double {
        return vehiculos.averageBy(condition)
    }

    /**
     * Cuenta el n√∫mero de veh√≠culos de un array que cumplen una condici√≥n.
     * @param condition condici√≥n a cumplir.
     * @return el n√∫mero de veh√≠culos que la cumplen.
     */
    override fun countby(condition: (Vehiculo) -> Boolean): Int {
        return vehiculos.countBy { condition(it) }
    }

    /**
     * Busca el veh√≠culo con el valor m√°ximo de un determinado selector y que cumpla una condici√≥n.
     * @param selector propiedad de la que se desea obtener el veh√≠culo que contiene el m√°ximo valor.
     * @param condition condici√≥n a cumplir.
     * @return el veh√≠culo con el valor m√°ximo de aquellos que cumplen la condici√≥n. Si ning√∫n veh√≠culo la cumple, devuelve null.
     */
    override fun maxBy(selector: (Vehiculo) -> Int, condition: (Vehiculo) -> Boolean): Vehiculo? {
        return vehiculos.maxByOrNull(selector, condition)
    }

    /**
     * Busca el veh√≠culo con el valor m√≠nimo de un determinado selector y que cumpla una condici√≥n.
     * @param selector propiedad de la que se desea obtener el veh√≠culo que contiene el m√≠nimo valor.
     * @param condition condici√≥n a cumplir.
     * @return el veh√≠culo con el valor m√≠nimo de aquellos que cumplen la condici√≥n. Si ning√∫n veh√≠culo la cumple, devuelve null.
     */
    override fun minBy(selector: (Vehiculo) -> Int, condition: (Vehiculo) -> Boolean): Vehiculo? {
        return vehiculos.minByOrNull(selector, condition)
    }

    /**
     * Ordena un array de veh√≠culos en funci√≥n de un selector y un modo de ordenamiento.
     * @param mode modo de ordenamiento, puede ser ascendente o descendente.
     * @param selector propiedad en base a la cual se va a ordenar el array.
     * @return el array ordenado.
     */
    override fun sortedBy(mode: ModoOrdenamiento, selector: (Vehiculo) -> Int): Array<Vehiculo> {
        return vehiculos.sortedBy(mode, selector)
    }

    /**
     * Guarda un veh√≠culo en el array de veh√≠culos, actualizando su fecha de creaci√≥n y de actualizaci√≥n.
     * @return el veh√≠culo guardado.
     */
    override fun save(item: Vehiculo): Vehiculo {
        logger.debug { "Guardando veh√≠culo" }
        val nuevoVehiculo = item.copy()
        nuevoVehiculo.id = generarId()
        nuevoVehiculo.createdAt = LocalDateTime.now()
        nuevoVehiculo.updatedAt = LocalDateTime.now()

        var indiceLibre: Int = 0
        indiceLibre = vehiculos.indexOf {it == null}

        if (indiceLibre == -1){
            logger.info { "Redimensionando array" }
            vehiculos = vehiculos.redimensionar(modo = ModoRedimension.AUMENTAR, maxItems = vehiculos.size * 2)
            indiceLibre = vehiculos.indexOf {it == null}
        }

        vehiculos[indiceLibre] = nuevoVehiculo
        logger.info { " üíö Veh√≠culo guardado con √©xito" }

        return nuevoVehiculo
    }

    /**
     * Busca todos los elementos del array de veh√≠culos.
     * @return el array que contiene todos los veh√≠culos.
     */
    override fun findAll(): Array<Vehiculo> {
        logger.debug { "Obteniendo todos los veh√≠culos" }
        return vehiculos.filterBy { true }
    }

    /**
     * Busca un veh√≠culo en el array en funci√≥n de su id.
     * @param id id del veh√≠culo buscado.
     * @return El veh√≠culo con dicha id en caso de existir. En caso contrario, null.
     */
    override fun findById(id: Int): Vehiculo? {
        logger.debug { "Obteniendo veh√≠culo por ID" }
        return vehiculos.firstOrNull { it.id == id }
    }

    /**
     * Actualiza un veh√≠culo.
     * @param id id del veh√≠culo.
     * @param item veh√≠culo a actualizar.
     * @return el veh√≠culo actualizado en caso de existir, null en caso contrario.
     */
    override fun update(id: Int, item: Vehiculo): Vehiculo? {
        logger.debug { "Actualizando veh√≠culo" }
        var vehiculoActualizado = this.findById(id)

        if (vehiculoActualizado != null){
            val indice = vehiculos.indexOf {item.id == id}
            vehiculoActualizado = vehiculoActualizado.copy()
            vehiculoActualizado.updatedAt = LocalDateTime.now()
            vehiculos[indice] = vehiculoActualizado
            logger.info { " üß° Veh√≠culo actualizado con √©xito" }
            return vehiculoActualizado
        }
        logger.info { " üõë No se ha encontrado el veh√≠culo para actualizar" }
        return null
    }

    /**
     * Borra un veh√≠culo.
     * @param id id del veh√≠culo a borrar.
     * @return el veh√≠culo borrado en caso de existir, null en caso contrario.
     */
    override fun delete(id: Int): Vehiculo? {
        logger.debug { "Borrando veh√≠culo" }

        val vehiculoBorrado = this.findById(id)

        if (vehiculoBorrado != null){
            vehiculoBorrado.updatedAt = LocalDateTime.now()
            vehiculoBorrado.isDeleted = true
            logger.info { " ‚ù§Ô∏è Veh√≠culo borrado con √©xito" }
        } else {
            logger.info { " üõë No se ha encontrado el veh√≠culo para borrar" }
        }
        return vehiculoBorrado
    }
}




